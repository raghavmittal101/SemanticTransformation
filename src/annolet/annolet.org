#+Title: AnnoLet! Web Annotation Tool
#+AUTHOR: Raghav Mittal
#+EMAIL:raghav.mittal@st.niituniversity.in
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export


  - The source is written in JavaScript and jQuery 1.7 is used in it.
  - *Release 0*

  To run this program you need to need to setup flask server from [[https://github.com/SSS-Studio-development/web-services][here]]. After server is successfully running go to [[https://rawgit.com/SSS-Studio-development/annoletjs/master/annolet.html][Annolet!]].
------------------------------

** Use of =jQuery.noConflict()=
   To make the program more robust and avoid clash between variables with that of running website
   jQuery noConflict() is used and normal '$' selector is changed with '$j'.

   #+BEGIN_SRC js :tangle ../../code/annolet/annolet.js :eval no
     var $j = jQuery.noConflict();
   #+end_src
--------------------------
** Calling annolet_main() function
   #+BEGIN_SRC js :tangle ../../code/annolet/annolet.js :eval no
   annolet_main();
#+end_src

** Function =annolet_createContainer()=
   This function creates a continer div which let the users interact with app.
   When =annolet_createContainer= is called, it injects CSS stylesheet into =<head>= 
   element of website to stylize the container and =<div id=annolet-container>...</div>= 
   whose inner HTML is a list of options inside =body=.

#+BEGIN_SRC js :tangle ../../code/annolet/annolet.js :eval no
var annolet_btn;
// function to create annolet controls container
function annolet_createContainer() {
    // appending a CSS stylesheet to head of webpage
    var link = document.createElement('link');
    // using rawgit.com MaxCDN.. files directly linked to git repo 'annoletjs/master'
    link.href = "https://cdn.rawgit.com/SSS-Studio-development/annoletjs/master/annolet.css"; //random version number removed bcoz some browser take it as text file and not as CSS.
    link.type = "text/css";
    link.rel = "stylesheet";
    document.getElementsByTagName('head')[0].appendChild(link);

    // appending a div to body of webpage
    var body = document.getElementsByTagName('body')[0];
    var annolet_container = document.createElement('div');
    annolet_container.id = 'annolet-container';
    body.appendChild(annolet_container);
    //injecting html code
    document.getElementById('annolet-container').innerHTML = "<ul id='annolet' class=annolet-tools-menu>"+
    "<span id='annolet' style='border-radius:10px;  color:orange;font-weight:bold;font-family:monospace; font-size:1.3em'>AnnoLet!</span>"+
    "<span id='annolet' style='color:grey;'>|</span>"+
    "<li id='annolet' class=annolet-tools-menu-item id=highlight-btn onclick='annolet_btn=1;'>TagIt!</li>"+
    /*"<li id='annolet' class=annolet-tools-menu-item id=highlight-btn onclick='annolet_btn=2;'>Highlight</li>"+*/
    "<li id='annolet' class=annolet-tools-menu-item id=highlight-btn onclick='annolet_btn=3;'>Phonetics</li>"+
    "<li id='annolet' class=annolet-tools-menu-item id=highlight-btn onclick='annolet_btn=4;'>Translation</li>"+
    "<li id='annolet' class=annolet-tools-menu-item id=exit-btn onclick='annolet_btn=0;'>exit</li>"+
    "</ul>"; //HTML to create a list of options
}
#+end_src
#+begin_verse
    _The container div contains following options_
   - /Phonetics/: when a DOM node is clicked, it is replaced with its phonetic representation. On click =annolet_btn= is changed to 3.
   - /Translation/: when a DOM node is clicked, it is replaced with its Hindi translation. On click =annolet_btn= is changed to 4.
   - /Highlight/: to highlight the given node element. On click =annolet_btn= is chaned to 2. This feature is disabled for now. Will b
   - /tagit/: to start tagging DOM elements. It will also highlight clicked element. On click =annolet_btn= is changed to 1. 
   - /exit/: to stop all functions and remove container from body. On click =annolet_btn= is changed to 0.
#+end_verse
---------------------------------------
** Functions to retrieve and evaluate Xpath of seleceted DOM element
   These functions are copied from [[https://code.google.com/p/fbug/source/browse/branches/firebug1.6/content/firebug/lib.js?spec=svn12950&r=8828#1332][Mozilla Firebug Opensource Code]]. Implemented  with small changes.
*** Function =anno_getXpath(target)=
   It returns string containing Xpath of selected element which is passed as an argument called =target=.

#+BEGIN_SRC js :tangle ../../code/annolet/annolet.js :eval no
// function to get Xpath to passed element
function anno_getXpathTo(element) {
    if (element.id !== '') {
        return "//*[@id='" + element.id + "']";
    }
    if (element === document.body) {
        return "html/" + element.tagName.toLowerCase();
    } //added 'html/' to generate a valid Xpath even if parent has no ID.
    var ix = 0;
    var siblings = element.parentNode.childNodes;
    for (var i = 0; i < siblings.length; i++) {
        var sibling = siblings[i];
        if (sibling === element) {
            return anno_getXpathTo(element.parentNode) + '/' + element.tagName.toLowerCase() + '[' + (ix + 1) + ']';
        }
        if (sibling.nodeType === 1 && sibling.tagName === element.tagName) {
            ix++;
        }
    }
}
#+end_src
--------------------------------------   
*** Function =anno_getElementByXpath(xpath)=
    This function returns that element as object whose Xpath is passed as an argument through it.

#+BEGIN_SRC js :tangle ../../code/annolet/annolet.js :eval no
// function to evaluate element from Xpath
function anno_getElementByXpath(xpath) {
    return document.evaluate(xpath, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
}
#+end_src 
--------------------------------
** Functions
*** =annolet_main()=
   =annolet_main()= is main function which will on execution calls =annolet_createContainer()= and monitors document
   for mouse clicks. On click, clicked element is selected as target which is passed through
   function =annolet_getXpath= and returned Xpath is stored in variable =xpath=.
   =annolet_main()= function always check for the current value of =annolet_btn= whenever user clicks.
   On the bases of this value, preffered function =anno_highlight()= for 1 is called. More option will be added later.

#+BEGIN_SRC js :tangle ../../code/annolet/annolet.js :eval no
//main function which will execute other functions
function annolet_main() {
    disableAllLinks()  // it will disable all the links present in webpage iteratively
    annolet_createContainer();
    document.onclick = function(event) {
        if (event === undefined) {
            event = window.event;
        } // for IE
        var target = 'target' in event ? event.target : event.srcElement; // for IE
        var root = document.compatMode === 'CSS1Compat' ? document.documentElement : document.body;
        var xpath = anno_getXpathTo(target);
        if (annolet_btn === 1) {
            anno_highlight(xpath);
        }
    };
}

#+end_src
   --------------------------------
*** =disableAllLinks()=
This function iterates through all the links (=<a>= tags) and disable them so 
that user will not go out of webpage while annotating webpage.

#+BEGIN_SRC js :tangle ../../code/annolet/annolet.js :eval no
// funtion to disable all links
function disableAllLinks(){
    var anchors = document.getElementsByTagName("a");
    for (var i = 0; i < anchors.length; i++) {
        anchors[i].onclick = function() {return(false);};
    }
}
#+end_src
*** =annolet_insertIntoObject(xpath)=
    This function will create an object called =annolet_obj= which will contain authorname(username), url(which is annotated) 
    and array of xpaths with tagName and tagType(like language, point of view). Everytime user clicks element, this function will run, so
    as to assure that all the work done is saved for retreival in future. Xpath is passed through it as argument. Function tagObject is used
    to push tagging information to tags array.

#+BEGIN_SRC js :tangle ../../code/annolet/annolet.js :eval no
//function to store tags into JSON object.
var annolet_obj = 0; //will save jason objects
function annolet_insertIntoObject(xpath) {
  if(annolet_obj==0){
    authorname = prompt('enter authorname');
    annolet_obj = {
        url: window.location.href,
        authorname: authorname,
        tags : []
    };
    tagObject(xpath, annolet_obj);
  }
  else {
    tagObject(xpath, annolet_obj);
  }
}
#+end_src
------------------------------
*** =tagObject(xpath, obj)= 
    This function asks user for tagging information and push it to tags array of =annolet_obj=.

#+BEGIN_SRC js :tangle ../../code/annolet/annolet.js :eval no
function tagObject(xpath, obj){
  tagName = prompt('tagName:');
  tagInfo = prompt('tagInfo');
  obj.tags.push(
    {
      tagName: tagName,
      tagInfo: tagInfo,
      xpath: xpath
    }
  )
}
#+end_src
*** =anno_highlight(xpath)=
    This function takes =xpath= as argument. Xpath of an element is passed to =anno_getElementByXpath(xpath)=
    which returns element in obect form. Then that object is selected using jQuery and using =wrapInner()= function 
    of jQuery it is wrapped inside =<span>= with id 'mark' and yellow background. Another function that is 
    =annolet_insertIntoObject()= creates an object and push it to object array.So it can be saved for future to a 
    server. It also prevents annolet container from highlighting itself.

#+BEGIN_SRC js :tangle ../../code/annolet/annolet.js :eval no
//function for highlighting element
function anno_highlight(xpath) {
    clicked_element = anno_getElementByXpath(xpath)
    //if element is already highlighted
    if (clicked_element.id == "mark" || clicked_element.id == "annolet") {
        console.log('not permitted');
    }
    else {
      // hightlight selected element and store it
      $j(anno_getElementByXpath(xpath)).wrapInner("<span id='mark' style='background:yellow;'></span>");
      annolet_insertIntoObject(xpath); // storing into object
    }
}
#+end_src   
---------------------------------
*** =anno_annotate()=
**** /not complete/
In this function I will use some functionality of =annolet_highlight()= function, then another function which will create 
a div containing =textarea=. This box will add to fixed div which will slide up. There will be two options in that box, 
1.save 
2.cancel. 
On clicking save, the content variable will become equal to the textarea value and then =annolet_pushToStack()= will be called. Right now there is no method for retrieval of annotations.
#+NAME:anno_annotate
#+begin_src js
function anno_annotate(xpath){
if (anno_getElementByXpath(xpath).id != "mark" || !(anno_getElementByXpath(xpath).id)) {
        //adding orange coloured border around selected part.
        $j(anno_getElementByXpath(xpath)).wrapInner("<span id='mark' style='border:solid 1px orange;'></span>");
        annolet_pushToStack(xpath);
    } else {
        console.log('highlighted already');
    }
}
#+end_src
------
*** =get_phonetics=

+ This makes a request to the webservices and gets the phonetic translation of
the string that is passed to it.
+ Make sure that the webservice is running if on the local host

#+BEGIN_SRC js :tangle ../../code/annolet/annolet.js :eval no
var phonetic_trans = "default_value";
var language_trans = "default_value";

function get_phonetics(str){

  var xhr = new XMLHttpRequest();
  xhr.open("POST", "//localhost:5000/phonetic-trans", true); // replace localhost afterwards.
  xhr.setRequestHeader("Access-Control-Allow-Origin", "*");
  xhr.setRequestHeader("Content-Type", "application/json; charset=UTF-8");
  xhr.send(JSON.stringify({"sentence":str}));


  xhr.onreadystatechange = processRequest;

  function processRequest(e)
  {
    if (xhr.readyState == 4)
    {
      console.log('pho trans set');
      phonetic_trans = xhr.responseText;
    }
  }

}
#+end_src

*** =get_languagetrans()=

+ This makes a request to the webservices and gets the language translation of
the string that is passed to it.
+ Make sure that the webservice is running if on the local host


#+BEGIN_SRC js :tangle ../../code/annolet/annolet.js :eval no
function get_languagetrans(str,fr,to){

  var xhr = new XMLHttpRequest();
  xhr.open("POST", "//localhost:5000/language-translive", true); // replace localhost afterwards
  xhr.setRequestHeader("Access-Control-Allow-Origin", "*");
  xhr.setRequestHeader("Content-Type", "application/json; charset=UTF-8");
  xhr.send(JSON.stringify({"sentence":str,"from-language":fr,"to-language":to}));

  xhr.onreadystatechange = processRequest;

  function processRequest(e)
  {
    if (xhr.readyState == 4)
    {
      console.log('language trans set');
      language_trans = xhr.responseText;
    }
  }

}
#+end_src

*** =anno_phonetic()=

#+BEGIN_SRC js :tangle ../../code/annolet/annolet.js :eval no
//function for getting phonetic
function anno_phonetic(xpath) {
  clicked_element = anno_getElementByXpath(xpath);
  if (clicked_element.id == "mark" || clicked_element.id == "annolet") {
      console.log('not permitted');
  }
  else {
    //if element is already translated
  if (anno_getElementByXpath(xpath).id != "phonetic" || !(anno_getElementByXpath(xpath).id)) {
    var text_to_translate = $j(anno_getElementByXpath(xpath)).html();
    get_phonetics(text_to_translate);
    var timer = window.setInterval
    (
      function ()
      {
        if(typeof phonetic_trans !== "default_value")
        {
          console.log("text changing");
          $j(anno_getElementByXpath(xpath)).text(phonetic_trans);
          phonetic_trans = "default_value";
          window.clearInterval(timer);
        }
        else
        {
          console.log("returned without change");
        }
      }
      ,1000
    );
  }
  else {
        console.log('already translated');
    }
  }
}
#+end_src

*** =anno_language()=

#+BEGIN_SRC js :tangle ../../code/annolet/annolet.js :eval no
//function for getting phonetic
function anno_language(xpath) {
  clicked_element = anno_getElementByXpath(xpath);
  //if element is already highlighted
  if (clicked_element.id == "mark" || clicked_element.id == "annolet") {
      console.log('not permitted');
  }
  else {
  //if element is already translated
  if (anno_getElementByXpath(xpath).id != "language" || !(anno_getElementByXpath(xpath).id)) {
    var text_to_translate = $j(anno_getElementByXpath(xpath)).html();
    get_languagetrans(text_to_translate,'en','hi');
    var timer = window.setInterval
    (
      function ()
      {
        if(typeof language_trans !== "default_value")
        {
          console.log("text changing");
          $j(anno_getElementByXpath(xpath)).text(language_trans);
          language_trans = "default_value";
          window.clearInterval(timer);
        }
        else
        {
          console.log("returned without change");
        }
      }
      ,1000
    );
  }
  else {
        console.log('already translated');
    }
  }
}
#+end_src
